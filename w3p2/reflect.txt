{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red42\green49\blue64;}
{\*\expandedcolortbl;;\cssrgb\c21569\c25490\c31765;}
\margl1440\margr1440\vieww35800\viewh20080\viewkind0
\deftab720
\pard\pardeftab720\sa400\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\
\
Full Name  : Sage Satsavia\
Student ID#: 132238197\
\
Authenticity Declaration:\
I declare this submission is the result of my own work and has not been\
shared with any other student or 3rd party content provider. This submitted\
piece of work is entirely of my own creation.\
\pard\pardeftab720\sa400\partightenfactor0
\cf2 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\
\
\
\
\
\
\
I gained a deeper understanding of C++ programming concepts such as classes, namespaces, input/output handling, and error handling. By implementing the Icecream and Vendor modules, I reinforced my knowledge of object-oriented programming principles and learned how to design and implement modular systems in C++.\
Key point I have learned are:\
1. Classes and objects: I learned how to define classes, create objects, and implement member functions to encapsulate data and behaviour.\
2. Namespaces: I understood the importance of namespaces for organizing code and preventing naming conflicts.\
4. Error handling: I gained experience in handling invalid user input by clearing error flags, ignoring input buffers, and providing appropriate error messages.\
Bugs/error I found:\
1. Implicit conversion warning: Addressing the implicit conversion warning required understanding the difference between `size_t` and `int` and how to handle conversions safely.\
2. Input validation: Ensuring input validation, especially for character inputs, required careful consideration of edge cases and error messages to guide the user effectively. Especially choiceChar function, I encounter a bug where even though I made sure that it would give an error if I input anything other then y or n, it will give an input, however \'93no\'94 was passing, so to fix that I added an if-else statement to specifically handle the \'93no\'94, I made sure to clear any flags and to ignore input buffers so it would handle the code.\
3. I found that adding the correct header files are also very important to insure there are no error nor any redefinitions. }