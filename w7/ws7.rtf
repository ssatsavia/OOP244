{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww23040\viewh17400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs48 \cf0 ///////////////////////////////////////////////////////////////////////////\
                               Reflection\
                             Workshop - #7\
Full Name  : Sage Satsavia\
Student ID#: 132238197\
\
Authenticity Declaration:\
I declare this submission is the result of my own work and has not been\
shared with any other student or 3rd party content provider. This submitted\
piece of work is entirely of my own creation.\
///////////////////////////////////////////////////////////////////////////\
\
\
Throughout the workshop and project milestones, I explored the concept of inheritance in object-oriented programming (OOP), which involves creating hierarchies of classes where child classes inherit properties and behaviors from their parent or base classes. This inheritance mechanism allows for code reuse, promotes modularity, and facilitates the organization of related classes.\
\
In my project, I designed base classes such as "BankAccount" and "SavingsAccount," which encapsulated common attributes and functionalities shared by various types of bank accounts. These base classes served as blueprints for more specialized child classes, such as "CheckingAccount" or "FixedDepositAccount," which inherited characteristics from their respective base classes while adding unique features specific to their types.\
\
By employing inheritance, I avoided redundancy by defining common attributes and methods in base classes, which were then inherited by child classes. This approach promoted code efficiency, as changes made to the base class automatically propagated to all its child classes, ensuring consistency and minimizing code duplication.\
\
Moreover, inheritance facilitated polymorphism, allowing objects of child classes to be treated as objects of their base class, enabling flexibility in code design and facilitating the implementation of generic algorithms that can operate on objects of different derived classes.\
\
Overall, understanding and effectively utilizing base classes and child classes were pivotal in creating a well-structured and maintainable codebase for my project, highlighting the importance of inheritance in OOP.}